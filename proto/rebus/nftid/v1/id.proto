syntax = "proto3";
package rebus.nftid.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/rebuschain/rebus.core/v1/x/nftid/types";

enum NftId {
  option (gogoproto.goproto_enum_prefix) = false;

  None = 0;
  v1 = 1;

}

enum PaymentType {
  option (gogoproto.goproto_enum_prefix) = false;

  Invalid = 0;
  Lifetime = 1;
  Lock = 2;

}

message Payment {
  option (gogoproto.equal) = true;

  cosmos.base.v1beta1.Coin amount = 1;
  int64 timestamp = 2;
  string locked_at_address = 3;
  bool can_refund = 4;
}

// A Id Records is the metadata of id data per type_organization_address
message IdRecord {
  // address of user
  string address = 1 [ (gogoproto.moretags) = "yaml:\"address\"" ];

  // refers to the type enum
  int32 type = 2 [ (gogoproto.moretags) = "yaml:\"type\"" ];

  // name of the organization responsible for the ID
  string organization = 3 [ (gogoproto.moretags) = "yaml:\"organization\"" ];

  // encryption key used to encrypt the private file image of the ID
  string encryption_key = 4 [ (gogoproto.moretags) = "yaml:\"encryption_key\"" ];

  // metadata url of file containing the information about the ID
  string metadata_url = 5 [ (gogoproto.moretags) = "yaml:\"metadata_url\"" ];

  // document number which is the sequence number of this id
  int64 document_number = 6 [ (gogoproto.moretags) = "yaml:\"document_number\"" ];

  // id number which is the hash of the key type_organization_address
  string id_number = 7 [ (gogoproto.moretags) = "yaml:\"id_number\"" ];

  // payment_Type is the form of payment used to activate this id
  PaymentType payment_type = 8 [ (gogoproto.moretags) = "yaml:\"payment_type\"" ];

  // payments is the record of payments made for this id by this user
  repeated Payment payments = 9 [ (gogoproto.moretags) = "yaml:\"payments\"" ];

  // active status of the nft id, this turns to true when the payment is made
  bool active = 10 [ (gogoproto.moretags) = "yaml:\"active\"" ];
}
